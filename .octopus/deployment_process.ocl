step "run-the-trident-database-creation-runbook" {
    name = "Run Trident Database Creation Runbook"

    action {
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-22"
            Octopus.Action.Template.Version = "14"
            Run.Runbook.Api.Key = "#{Project.Runbook.Api.Key}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Create Trident Database"
            Run.Runbook.Project.Name = "Trident"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool = "hosted-windows"
    }
}

step "generate-delta-database-report" {
    condition = "Variable"
    name = "Generate Delta Database Report"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Deployment.Error == \"\"}#{Project.Database.ApprovalRequired}#{/if}\""
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[Trident.Database].ExtractedPath"]
                $connectionString = $OctopusParameters["Project.Connection.String"]
                $environmentName = $OctopusParameters["Octopus.Environment.Name"]
                $reportPath = $OctopusParameters["Project.Database.Report.Path"]
                
                cd $packagePath
                $appToRun = ".\Octopus.Trident.Database.DbUp"
                $generatedReport = "$reportPath\UpgradeReport.html"
                
                & $appToRun --ConnectionString="$connectionString" --PreviewReportPath="$reportPath"
                
                New-OctopusArtifact -Path "$generatedReport" -Name "$environmentName.UpgradeReport.html"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"

        packages "Trident.Database" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "approve-database-delta-script" {
    name = "Approve Database Delta Script"

    action {
        action_type = "Octopus.Manual"
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Please approve the database delta scripts found in the artifacts section."
            Octopus.Action.Manual.ResponsibleTeamIds = "dbas,global/octopus-managers"
        }
        worker_pool_variable = ""
    }
}

step "deploy-database-changes" {
    name = "Deploy Database Changes"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[Trident.Database].ExtractedPath"]
                $connectionString = $OctopusParameters["Project.Connection.String"]
                
                cd $packagePath
                $appToRun = ".\Octopus.Trident.Database.DbUp"
                
                & $appToRun --ConnectionString="$connectionString"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"

        packages "Trident.Database" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "deploy-a-package" {
    name = "Deploy Trident Website"
    properties = {
        Octopus.Action.MaxParallelism = "1"
        Octopus.Action.TargetRoles = "trident-web"
    }

    action "remove-from-load-balancer-clone-1" {
        action_type = "Octopus.Script"
        environments = ["staging", "production"]
        name = "Remove from Load Balancer - clone (1)"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = "Write-Host \"Remove from the Load Balancer.\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"
    }

    action "deploy-a-package" {
        action_type = "Octopus.TentaclePackage"
        name = "Deploy a Package"
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.JsonConfigurationVariables"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "appsettings.json"
            Octopus.Action.Package.PackageId = "Trident.Web"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Web"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }

    action "add-to-load-balancer" {
        action_type = "Octopus.Script"
        environments = ["staging", "production"]
        name = "Add to Load Balancer"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $machineName = $OctopusParameters["Octopus.Machine.Name"]
                
                Write-Host "Remove $machineName from the Load Balancer."
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"
    }
}

step "notify-developers-of-status" {
    condition = "Always"
    name = "Notify Developers of Status"

    action {
        action_type = "Octopus.Email"
        properties = {
            Octopus.Action.Email.Body = "You can view the the deployment here: #{Octopus.Web.ServerUri}/app#/#{Octopus.Space.Id}/tasks/#{Octopus.Task.Id}"
            Octopus.Action.Email.Subject = "#{Notification.Body.Text}"
            Octopus.Action.Email.To = "preeti.walters@octopus.com"
        }
        worker_pool_variable = ""
    }
}

step "send-slack-message-on-failure" {
    condition = "Failure"
    name = "Send Slack Message on Failure"

    action {
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-1"
            Octopus.Action.Template.Version = "14"
            ssn_Channel = "trident-deployment-notifications "
            ssn_Color = "danger"
            ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "#{Notification.Body.Text}"
            ssn_Title = "#{Notification.Subject.Text}"
            ssn_Username = "Trident Project in Octopus Deploy"
        }
        worker_pool = "hosted-windows"
    }
}